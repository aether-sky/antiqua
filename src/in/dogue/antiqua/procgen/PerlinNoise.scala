

package in.dogue.antiqua.procgen

import in.dogue.antiqua.data.Array2d


class PerlinNoise {
  import scala.math._


  def generate(width:Int, height:Int, xStart:Int, yStart:Int, seed:Int) = {
    Array2d.tabulate(width, height) { case (i, j) =>
      noise((i + xStart)/3.3f, (j + yStart)/3.3f, (seed + 0.0001f)/3.3f)
    }
  }

  private def noise(xi:Double, yi:Double, zi:Double) = {
    val X:Int = floor(xi).toInt & 255
    val Y:Int = floor(yi).toInt & 255
    val Z:Int = floor(zi).toInt & 255

    val x = xi - floor(xi)
    val y = yi - floor(yi)
    val z = zi - floor(zi)

    val u = fade(x)
    val v = fade(y)
    val w = fade(z)

    val A = p(X) + Y
    val AA = p(A) + Z
    val AB = p(A + 1) + Z
    val B = p(X+1) + Y
    val BA = p(B) + Z
    val BB = p(B+1) + Z

    lerp(w, lerp(v, lerp(u, grad(p(AA  ), x  , y  , z   ),
                            grad(p(BA  ), x-1, y  , z   )),
                    lerp(u, grad(p(AB  ), x  , y-1, z   ),
                            grad(p(BB  ), x-1, y-1, z   ))),
            lerp(v, lerp(u, grad(p(AA+1), x  , y  , z-1 ),
                            grad(p(BA+1), x-1, y  , z-1 )),
                    lerp(u, grad(p(AB+1), x  , y-1, z-1 ),
                            grad(p(BB+1), x-1, y-1, z-1 ))))
  }


  def fade(t:Double) = t * t * t * (t * (t * 6 - 15) + 10)
  def lerp(t:Double, a:Double, b:Double) = a + t * (b - a)
  def grad(hash:Int, x:Double, y:Double, z:Double):Double = {
    val h:Int = hash & 15
    val u:Double = if (h < 8) x else y
    val v:Double = if (h < 4) y else (if (h == 12 || h == 14) x else z)
    (if ((h&1) == 0) u else -u) + (if ((h&2) == 0) v else -v)
  }

  val p = Array[Int](
    228, 206, 172, 131, 1, 76, 130, 68, 224, 253, 52, 218, 214, 224, 195, 93, 207, 41, 171, 250, 254, 20, 74, 56, 131, 147, 73, 195, 241, 157, 31, 232, 150, 23, 182, 140, 55, 131, 45, 195, 136, 175, 111, 178, 45, 229, 55, 151, 165, 54, 246, 164, 152, 25, 100, 127, 173, 154, 134, 70, 113, 240, 49, 72, 123, 245, 95, 188, 200, 231, 116, 106, 186, 26, 188, 88, 204, 161, 202, 249, 56, 37, 170, 72, 177, 108, 2, 6, 137, 16, 100, 238, 73, 204, 75, 2, 121, 134, 40, 200, 127, 8, 23, 228, 137, 137, 200, 118, 101, 209, 9, 124, 90, 148, 150, 67, 34, 246, 148, 216, 168, 55, 57, 8, 2, 151, 206, 75, 224, 21, 164, 187, 7, 163, 81, 13, 170, 138, 99, 187, 214, 17, 59, 160, 41, 59, 123, 213, 196, 22, 71, 65, 177, 154, 74, 98, 12, 76, 146, 37, 163, 189, 165, 101, 100, 167, 247, 186, 34, 84, 100, 18, 96, 114, 43, 232, 119, 195, 114, 45, 150, 42, 35, 129, 169, 148, 75, 207, 2, 69, 15, 176, 216, 57, 219, 92, 210, 97, 68, 13, 20, 103, 209, 9, 152, 129, 177, 232, 64, 220, 20, 39, 131, 137, 242, 155, 142, 69, 115, 236, 180, 15, 93, 129, 52, 67, 55, 24, 132, 152, 144, 188, 33, 144, 75, 147, 20, 208, 206, 136, 199, 121, 221, 129, 163, 117, 52, 232, 142, 181, 219, 46, 205, 123, 79, 71,
    228, 206, 172, 131, 1, 76, 130, 68, 224, 253, 52, 218, 214, 224, 195, 93, 207, 41, 171, 250, 254, 20, 74, 56, 131, 147, 73, 195, 241, 157, 31, 232, 150, 23, 182, 140, 55, 131, 45, 195, 136, 175, 111, 178, 45, 229, 55, 151, 165, 54, 246, 164, 152, 25, 100, 127, 173, 154, 134, 70, 113, 240, 49, 72, 123, 245, 95, 188, 200, 231, 116, 106, 186, 26, 188, 88, 204, 161, 202, 249, 56, 37, 170, 72, 177, 108, 2, 6, 137, 16, 100, 238, 73, 204, 75, 2, 121, 134, 40, 200, 127, 8, 23, 228, 137, 137, 200, 118, 101, 209, 9, 124, 90, 148, 150, 67, 34, 246, 148, 216, 168, 55, 57, 8, 2, 151, 206, 75, 224, 21, 164, 187, 7, 163, 81, 13, 170, 138, 99, 187, 214, 17, 59, 160, 41, 59, 123, 213, 196, 22, 71, 65, 177, 154, 74, 98, 12, 76, 146, 37, 163, 189, 165, 101, 100, 167, 247, 186, 34, 84, 100, 18, 96, 114, 43, 232, 119, 195, 114, 45, 150, 42, 35, 129, 169, 148, 75, 207, 2, 69, 15, 176, 216, 57, 219, 92, 210, 97, 68, 13, 20, 103, 209, 9, 152, 129, 177, 232, 64, 220, 20, 39, 131, 137, 242, 155, 142, 69, 115, 236, 180, 15, 93, 129, 52, 67, 55, 24, 132, 152, 144, 188, 33, 144, 75, 147, 20, 208, 206, 136, 199, 121, 221, 129, 163, 117, 52, 232, 142, 181, 219, 46, 205, 123, 79, 71
  )
}
